===
Integers
===

100
1_0_0
0xab
0xAB
0xA_B
-100

---

(source_file (integer) (integer) (integer) (integer) (integer) (integer))

===
Floats
===

1.2
100.200
1.1_2
-1.2
1e2
1e+2
1E+2

---

(source_file (float) (float) (float) (float) (float) (float) (float))

===
Keyword expressions
===

self
nil
true
false

---

(source_file (self) (nil) (true) (false))

===
Blocks
===

{}
{ true }

---

(source_file (block) (block (true)))

===
Single quoted strings
===

'hello'
'a\nb'
'a\tb'
'a\u{AC}b'
'a\u{FFFF}b'
'a
b'
'a\${}b'
'a${10}b'
'a\'b'
'a\"b'

---

(source_file
  (string (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (interpolation (integer)) (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (escape_sequence) (string_content)))

===
Double quoted strings
===

"hello"
"a\nb"
"a\tb"
"a\u{AC}b"
"a\u{FFFF}b"
"a
b"
"a\${}b"
"a${10}b"
"a\'b"
"a\"b"

---

(source_file
  (string (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (interpolation (integer)) (string_content))
  (string (string_content) (escape_sequence) (string_content))
  (string (string_content) (escape_sequence) (string_content)))

===
Variable references
===

foo
Foo
@foo

---

(source_file (identifier) (constant) (field))

===
Binary operations
===

1 and 2
1 or 2
1 and 2 or 3
1 + 2
1 - 2
1 / 2
1 * 2
1 ** 2
1 % 2
1 < 2
1 > 2
1 <= 2
1 >= 2
1 << 2
1 >> 2
1 >>> 2
1 & 2
1 | 2
1 ^ 2
1 == 2
1 != 2
1 + 2 and 3
1 + 2 or 3

---

(source_file
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (binary (integer) (integer)) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (integer) (integer))
  (binary (binary (integer) (integer)) (integer))
  (binary (binary (integer) (integer)) (integer)))

===
Type casts
===

1 + 2 as A
1 as A as B
1 as A or 2 as B
1 as A and 2 as B

---

(source_file
  (cast (binary (integer) (integer)) (type))
  (cast (cast (integer) (type)) (type))
  (binary (cast (integer) (type)) (cast (integer) (type)))
  (binary (cast (integer) (type)) (cast (integer) (type))))

===
Constant definitions
===

let A = 10
let A = A + B

---

(source_file
  (define_constant name: (constant) value: (integer))
  (define_constant
    name: (constant) value: (binary left: (constant) right: (constant))))

===
Variable definitions
===

let a = 10
let a: Int = 10
let mut a = 10
let a = 1 + 2

---

(source_file
  (define_variable name: (identifier) value: (integer))
  (define_variable name: (identifier) type: (type) value: (integer))
  (define_variable modifier: (modifier) name: (identifier) value: (integer))
  (define_variable
    name: (identifier) value: (binary left: (integer) right: (integer))))

===
Grouped expressions
===

(1)
(1 + 2)
1 + (2 and 3)

---

(source_file
  (grouped_expression (integer))
  (grouped_expression (binary (integer) (integer)))
  (binary (integer) (grouped_expression (binary (integer) (integer)))))

===
Tuples
===

(1,)
(1,2)
(1,2,3)
(1,2,3,)

---

(source_file
  (tuple (integer))
  (tuple (integer) (integer))
  (tuple (integer) (integer) (integer))
  (tuple (integer) (integer) (integer)))

===
Arrays
===

[]
[10]
[10,20]
[10,20,]

---

(source_file
  (array)
  (array (integer))
  (array (integer) (integer))
  (array (integer) (integer)))

===
Instance expressions
===

Person {}
Person { @a = '', @b = 0, }

---

(source_file
  (instance name: (constant) fields: (instance_fields))
  (instance name: (constant) fields: (instance_fields
    (assign_field name: (field) value: (string))
    (assign_field name: (field) value: (integer)))))

===
Control flow expressions
===

break
return
10
return 10
return    10
next
try 10

---

(source_file
  (break)
  (return)
  (integer)
  (return (integer))
  (return (integer))
  (next)
  (try (integer)))

===
Closures
===

fn {}
fn { 10 }
fn -> Int {}
fn (a) {}
fn (a: A) {}
fn (a: A, b: B) {}
fn (a: A, b: B) -> C {}
fn move {}

---

(source_file
  (closure body: (block))
  (closure body: (block (integer)))
  (closure returns: (type) body: (block))
  (closure arguments: (arguments (argument name: (identifier))) body: (block))
  (closure
    arguments: (arguments (argument name: (identifier) type: (type)))
    body: (block))
  (closure
    arguments: (arguments
      (argument name: (identifier) type: (type))
      (argument name: (identifier) type: (type)))
    body: (block))
  (closure
    arguments: (arguments
      (argument name: (identifier) type: (type))
      (argument name: (identifier) type: (type)))
    returns: (type)
    body: (block))
  (closure modifier: (modifier) body: (block)))

===
If expressions
===

if true {}
if true {} else if true {}
if true {} else if true {} else {}

---

(source_file
  (if condition: (true) consequence: (block))
  (if
    condition: (true)
    consequence: (block)
    alternative: (else_if condition: (true) consequence: (block)))
  (if
    condition: (true)
    consequence: (block)
    alternative: (else_if condition: (true) consequence: (block))
    alternative: (else body: (block))))
